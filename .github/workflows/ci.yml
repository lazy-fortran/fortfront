name: Tests

on:
  push:
    branches:
      - main
      - master
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test-linux:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.draft == false)
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache FPM binary
      id: cache-fpm
      uses: actions/cache@v4
      with:
        path: /usr/local/bin/fpm
        key: ${{ runner.os }}-fpm-0.12.0
    
    - name: Setup FPM
      if: steps.cache-fpm.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/fortran-lang/fpm/releases/download/v0.12.0/fpm-0.12.0-linux-x86_64-gcc-12
        chmod +x fpm-0.12.0-linux-x86_64-gcc-12
        sudo mv fpm-0.12.0-linux-x86_64-gcc-12 /usr/local/bin/fpm
    
    - name: Cache apt packages
      uses: awalsh128/cache-apt-pkgs-action@v1
      with:
        packages: gfortran lcov
        version: 1.0
    
    - name: Cache FPM dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.local/share/fpm
          build/dependencies
        key: ${{ runner.os }}-fpm-deps-${{ hashFiles('fpm.toml') }}
        restore-keys: |
          ${{ runner.os }}-fpm-deps-

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    
    - name: Show compiler versions
      run: |
        gfortran --version
        fpm --version
        python3 --version

    - name: Run all tests
      run: fpm test

  test-windows:
    runs-on: windows-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.draft == false)
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: false
        path-type: inherit
        cache: true
        release: false
        install: >-
          mingw-w64-x86_64-gcc-fortran
          mingw-w64-x86_64-gcc
          git

    - name: Add MinGW to PATH
      run: echo C:\msys64\mingw64\bin | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: pwsh

    - name: Cache FPM binary (Windows)
      id: cache-fpm-win
      uses: actions/cache@v4
      with:
        path: C:\msys64\mingw64\bin\fpm.exe
        key: ${{ runner.os }}-fpm-0.12.0

    - name: Install FPM
      if: steps.cache-fpm-win.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        Write-Host "Installing FPM directly from GitHub releases..."
        Invoke-WebRequest -Uri "https://github.com/fortran-lang/fpm/releases/download/v0.12.0/fpm-0.12.0-windows-x86_64-gcc-12.exe" -OutFile "fpm.exe"
        Move-Item -Path "fpm.exe" -Destination "C:\msys64\mingw64\bin\fpm.exe"
        & "C:\msys64\mingw64\bin\fpm.exe" --version

    - name: Cache FPM dependencies (Windows)
      uses: actions/cache@v4
      with:
        path: |
          ~\AppData\Local\fpm
          build\dependencies
        key: ${{ runner.os }}-fpm-deps-${{ hashFiles('fpm.toml') }}
        restore-keys: |
          ${{ runner.os }}-fpm-deps-

    - name: Cache build artifacts (Windows)
      uses: actions/cache@v4
      with:
        path: |
          build\gfortran_*
          !build\gfortran_*/test
        key: ${{ runner.os }}-build-${{ hashFiles('src/**/*.f90') }}
        restore-keys: |
          ${{ runner.os }}-build-

    - name: Run all tests
      shell: cmd
      run: |
        echo "Running all tests..."
        fpm test --flag -cpp

  # macOS CI temporarily disabled due to runner issues
  # test-macos:
  #   runs-on: macos-latest
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #
  #   - name: Setup Micromamba
  #     uses: mamba-org/setup-micromamba@v2
  #     with:
  #       micromamba-version: 'latest'
  #       environment-name: test-env
  #       create-args: >-
  #         python=3.11
  #         fpm
  #         gfortran
  #       init-shell: bash
  #       cache-environment: true
  #       channels: conda-forge
  #
  #   - name: Check versions
  #     shell: bash -el {0}
  #     run: |
  #       echo "GCC version:"
  #       gfortran --version
  #       echo "FPM version:"
  #       fpm --version
  #       echo "GCC/G++ version:"
  #       gcc --version || true
  #       # Check if gcc-15 is available
  #       gcc-15 --version || echo "gcc-15 not found, will try to find appropriate gcc"
  #
  #   - name: Cache FPM dependencies
  #     uses: actions/cache@v4
  #     with:
  #       path: |
  #         ~/.local/share/fpm
  #         build/dependencies
  #       key: ${{ runner.os }}-fpm-deps-${{ hashFiles('fpm.toml') }}
  #       restore-keys: |
  #         ${{ runner.os }}-fpm-deps-
  #
  #   - name: Run all tests
  #     shell: bash -el {0}
  #     run: |
  #       # Set FPM_CC for test runs with proper GCC version
  #       if command -v gcc-15 &> /dev/null; then
  #         export FPM_CC=gcc-15
  #       elif command -v gcc-14 &> /dev/null; then
  #         export FPM_CC=gcc-14
  #       elif command -v gcc-13 &> /dev/null; then
  #         export FPM_CC=gcc-13
  #       else
  #         GCC_PATH=$(which gcc)
  #         if [ -n "$GCC_PATH" ]; then
  #           export FPM_CC=$GCC_PATH
  #         fi
  #       fi
  #       
  #       echo "Using FPM_CC=$FPM_CC"
  #       echo "Running all tests..."
  #       fpm test --flag -cpp