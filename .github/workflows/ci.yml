name: Tests

on:
  push:
    branches:
      - main
      - master
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test-linux:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.draft == false)
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache FPM binary
      id: cache-fpm
      uses: actions/cache@v4
      with:
        path: /usr/local/bin/fpm
        key: ${{ runner.os }}-fpm-0.12.0
    
    - name: Setup FPM
      if: steps.cache-fpm.outputs.cache-hit != 'true'
      run: |
        wget https://github.com/fortran-lang/fpm/releases/download/v0.12.0/fpm-0.12.0-linux-x86_64-gcc-12
        chmod +x fpm-0.12.0-linux-x86_64-gcc-12
        sudo mv fpm-0.12.0-linux-x86_64-gcc-12 /usr/local/bin/fpm
    
    - name: Cache apt packages
      uses: awalsh128/cache-apt-pkgs-action@v1
      with:
        packages: gfortran lcov
        version: 1.0
    
    - name: Cache FPM dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.local/share/fpm
          build/dependencies
        key: ${{ runner.os }}-fpm-deps-${{ hashFiles('fpm.toml') }}
        restore-keys: |
          ${{ runner.os }}-fpm-deps-

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    
    - name: Show compiler versions
      run: |
        gfortran --version
        fpm --version
        python3 --version

    - name: Run all tests with coverage
      run: |
        # Run all tests with coverage flags (this will build and test)
        fpm test --profile debug --flag "-cpp -fprofile-arcs -ftest-coverage -g"

    - name: Generate coverage report
      run: |
        # Debug: Show where coverage files are located
        echo "Coverage files (.gcda):"
        find . -name "*.gcda" | head -10
        echo "Coverage files (.gcno):"
        find . -name "*.gcno" | head -10
        
        # Generate coverage report with lcov
        lcov --capture --directory build/ --output-file coverage.info \
          --rc branch_coverage=1 \
          --ignore-errors inconsistent,mismatch
        
        # Remove unwanted files from coverage
        lcov --remove coverage.info \
          'build/dependencies/*' \
          'test/*' \
          --output-file coverage_filtered.info \
          --ignore-errors unused
        
        # Generate HTML report
        genhtml coverage_filtered.info --output-directory coverage_html \
          --branch-coverage \
          --legend
        
        # Convert lcov info to Cobertura XML for codecov
        # Ensure Python and pip are available
        python3 -m pip install --user lcov-cobertura
        python3 -m lcov_cobertura coverage_filtered.info -o coverage.xml
        
        # Debug: Show coverage.xml content
        echo "Coverage XML file size and first few lines:"
        ls -la coverage.xml
        head -10 coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        verbose: true

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: |
          coverage_html/
          coverage.xml
          coverage.info
          coverage_filtered.info
    
    - name: Check coverage threshold
      run: |
        # Extract coverage percentage from XML
        coverage=$(grep -oP 'line-rate="\K[^"]+' coverage.xml | head -1)
        coverage_percent=$(echo "$coverage * 100" | bc -l | cut -d. -f1)
        
        echo "Total coverage: ${coverage_percent}%"
        
        # Fail if coverage drops below threshold
        # Temporarily set to 40% while we work on improving coverage
        if [ "$coverage_percent" -lt "40" ]; then
          echo "Coverage ${coverage_percent}% is below threshold of 40%"
          exit 1
        fi

  test-windows:
    runs-on: windows-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.draft == false)
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: false
        path-type: inherit
        install: >-
          mingw-w64-x86_64-gcc-fortran
          mingw-w64-x86_64-gcc
          git
      # Note: msys2/setup-msys2 has its own caching mechanism

    - name: Add MinGW to PATH
      run: echo C:\msys64\mingw64\bin | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: pwsh

    - name: Cache FPM binary (Windows)
      id: cache-fpm-win
      uses: actions/cache@v4
      with:
        path: C:\msys64\mingw64\bin\fpm.exe
        key: ${{ runner.os }}-fpm-0.12.0

    - name: Install FPM
      if: steps.cache-fpm-win.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        Write-Host "Installing FPM directly from GitHub releases..."
        Invoke-WebRequest -Uri "https://github.com/fortran-lang/fpm/releases/download/v0.12.0/fpm-0.12.0-windows-x86_64-gcc-12.exe" -OutFile "fpm.exe"
        Move-Item -Path "fpm.exe" -Destination "C:\msys64\mingw64\bin\fpm.exe"
        & "C:\msys64\mingw64\bin\fpm.exe" --version

    - name: Cache FPM dependencies (Windows)
      uses: actions/cache@v4
      with:
        path: |
          ~\AppData\Local\fpm
          build\dependencies
        key: ${{ runner.os }}-fpm-deps-${{ hashFiles('fpm.toml') }}
        restore-keys: |
          ${{ runner.os }}-fpm-deps-

    - name: Run all tests
      shell: cmd
      run: |
        echo "Running all tests..."
        fpm test --flag -cpp

  test-macos:
    runs-on: macos-13  # Use macos-13 instead of latest to avoid performance issues
    timeout-minutes: 30
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.draft == false)
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Micromamba
      uses: mamba-org/setup-micromamba@v2
      with:
        micromamba-version: 'latest'
        environment-name: test-env
        create-args: >-
          python=3.11
          fpm
          gfortran
        init-shell: bash
        cache-environment: true
        channels: conda-forge

    - name: Check versions
      shell: bash -el {0}
      run: |
        echo "GCC version:"
        gfortran --version
        echo "FPM version:"
        fpm --version
        echo "GCC/G++ version:"
        gcc --version || true
        # Check if gcc-15 is available
        gcc-15 --version || echo "gcc-15 not found, will try to find appropriate gcc"

    - name: Cache FPM dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.local/share/fpm
          build/dependencies
        key: ${{ runner.os }}-fpm-deps-${{ hashFiles('fpm.toml') }}
        restore-keys: |
          ${{ runner.os }}-fpm-deps-

    - name: Run all tests
      shell: bash -el {0}
      run: |
        # Set FPM_CC for test runs with proper GCC version
        if command -v gcc-15 &> /dev/null; then
          export FPM_CC=gcc-15
        elif command -v gcc-14 &> /dev/null; then
          export FPM_CC=gcc-14
        elif command -v gcc-13 &> /dev/null; then
          export FPM_CC=gcc-13
        else
          GCC_PATH=$(which gcc)
          if [ -n "$GCC_PATH" ]; then
            export FPM_CC=$GCC_PATH
          fi
        fi
        
        echo "Using FPM_CC=$FPM_CC"
        echo "Running all tests..."
        fpm test --flag -cpp